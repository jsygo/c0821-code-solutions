/server/public/index.html is loaded in the browser
the script tag on line 18 loads the file main.js
main.js is created by webpack by checking /client/pages/index.jsx and bundling together all the imports
/client/pages/index.jsx renders an App component in the #root div of /server/public/index.html
the App component renders a context Provider with a value of an object
  that object contains the user and route properties of the components state, and the handleSignIn and handleSignOut methods of the component
the App component checks the current path in the route property its state and renders the correct page accordingly

1. User can sign up:

if the path is 'sign-up', App renders an Auth component
  the welcome message will say 'Create an account to get started!'
  the submit button will say 'Register'
  the alternate action anchor will say 'Sign in instead' and will have an href of '#sign-in'
the Auth component renders an AuthForm component
  the Auth component passes 2 props to the AuthForm component
    action, which is assigned the value of the path which is currently 'sign-up'
    onSignIn, which will call the handleSignIn method from the context
each time the user changes the input for the username or password fields of the AuthForm,
  the handleChange method updates the state of the AuthForm component
when the user submits the form,
  the handleSubmit method is called
    the handleSubmit method calls the fetch function to make a POST request to the server
      the last part of the route for the request is determined by the action prop,
      so in this case the route will end up being '/api/auth/sign-up'
the server receives the request at '/api/auth/sign-up'
  the server checks to ensure the request includes both username and password values
    if it doesnt, the server throws a 400 error, 'username and password are required fields'
    if it does,
    the password is hashed using argon2,
    the username and hashed password are inserted into the 'users' table of the database,
    along with userId and createdAt columns generated by the database
when the promise that is returned by the fetch function is resolved,
since the action is 'sign-up', the handleSubmit function changes window.location.hash to 'sign-in'
  this triggers the 'hashchange' event of the window object
    the event handler calls setState to update the route to the new window.location.hash
      this schedules a rerender, and this time App renders an Auth component,
      but with path 'sign-in', bringing you to the sign-in page

2. User can sign in:

if the path is 'sign-in', App renders an Auth component
  the welcome message will say 'Please sign in to continue'
  the submit button will say 'Login'
  the alternate action anchor will say 'Register now' and will have an href of '#sign-up'
the Auth component renders an AuthForm component
  the Auth component passes 2 props to the AuthForm component
    action, which is assigned the value of the path which is currently 'sign-up'
    onSignIn, which will call the handleSignIn method from the context
each time the user changes the input for the username or password fields of the AuthForm,
  the handleChange method updates the state of the AuthForm component
when the user submits the form,
  the handleSubmit method is called
    the handleSubmit method calls the fetch function to make a POST request to the server
      the last part of the route for the request is determined by the action prop,
      so in this case the route will end up being '/api/auth/sign-in'
the server receives the request at '/api/auth/sign-in'
  the server checks to ensure the request includes both username and password values
    if it doesnt, the server throws a 401 error, 'invalid login'
    if it does,

3. User can stay signed in (even if they refresh the page):



4. user can sign out:
